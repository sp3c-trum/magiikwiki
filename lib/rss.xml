<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Magikopedia]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib\media\favicon.png</url><title>Magikopedia</title><link/></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Thu, 26 Dec 2024 11:45:17 GMT</lastBuildDate><atom:link href="lib\rss.xml" rel="self" type="application/rss+xml"/><pubDate>Thu, 26 Dec 2024 11:45:17 GMT</pubDate><copyright><![CDATA[Mag Magik II]]></copyright><ttl>60</ttl><dc:creator>Mag Magik II</dc:creator><item><title><![CDATA[Index]]></title><description><![CDATA[ 
 <br>magikopedia, bitch]]></description><link>index.html</link><guid isPermaLink="false">Index.md</guid><dc:creator><![CDATA[Mag Magik II]]></dc:creator><pubDate>Thu, 26 Dec 2024 11:38:20 GMT</pubDate></item><item><title><![CDATA[2024-12-24]]></title><description><![CDATA[<a class="tag" href="?query=tag:personal" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#personal</a> 
 <br><a href=".?query=tag:personal" class="tag" target="_blank" rel="noopener nofollow">#personal</a><br>Zaktualizowałem dzisiaj sporo notatek z hardware'u w systemach operacyjnych. Mocno się dzisiaj wkręciłem w naukę więc na pewno w najbliższym czasie bardziej się tym zajmę.<br>
Moim planem na jutro jest zrobienie projektu w C# który pobiera dane z pliku excel i ładuje te dane do bazy danych SQL. Musze się nauczyć trochę bardziej programować bo póki co robię to bardzo powierzchownie. Mam nadzieję że będzie to produktywny dzień. Algorytmy dalej na mnie czekają, chyba zajmę się nimi też jutro. Research is certainly being done. A i muszę też w końcu dokończyć NerfSerwer, to też dosyć spoko projekt. <br>Pamiętaj też że ten projekt na oskara w szkole dalej czeka!!!]]></description><link>_notes\2024-12-24.html</link><guid isPermaLink="false">_Notes/2024-12-24.md</guid><pubDate>Wed, 25 Dec 2024 01:10:51 GMT</pubDate></item><item><title><![CDATA[2024-12-25]]></title><description><![CDATA[ 
 ]]></description><link>_notes\2024-12-25.html</link><guid isPermaLink="false">_Notes/2024-12-25.md</guid><pubDate>Wed, 25 Dec 2024 21:37:26 GMT</pubDate></item><item><title><![CDATA[Wyszukiwanie binarne]]></title><description><![CDATA[ 
 <br><br>Wydajność algorytmu: <br>
Wyszukiwanie binarne pozwala na określenie pozycji podanego elementu w posortowanej liście. Lista dzielona jest na pół, po czym sprawdzane jest czy szukany element jest większy lub mniejszy od połowy listy. Jesli jest mniejszy, mniejsza połowa listy jest dzielona na pół i proces jest powtarzany, jeśli jest większy to większa połowa listy podlega temu samemu traktowaniu.<br><br>int? binarySearch()
{
    int start = 0;
    int end = sortedList.Count - 1;
    while (true)
    {
        int mid = (start + end) / 2;
        if (sortedList[mid] == szukanaLiczba)
        {
            return mid;
        }
        else if (szukanaLiczba &gt; sortedList[mid])
        {
            start = mid + 1;
        }
        else if (szukanaLiczba &lt; sortedList[mid])
        {
            start = mid - 1;
        }
        else {
            return null;
        }
 
    }
}
]]></description><link>algorithms\na-listach-posortowanych\wyszukiwanie-binarne.html</link><guid isPermaLink="false">Algorithms/Na listach posortowanych/Wyszukiwanie binarne.md</guid><pubDate>Wed, 25 Dec 2024 20:57:03 GMT</pubDate></item><item><title><![CDATA[Algorytmy]]></title><description><![CDATA[ 
 <br><br>Algorytm to zestaw instrukcji opisujących jak wykonać pewne zadanie. Wydajność danego algorytmu można przedstawić za pomocą <a data-tooltip-position="top" aria-label="Notacja dużego O" data-href="Notacja dużego O" href="matematyka\notacja-dużego-o.html" class="internal-link" target="_self" rel="noopener nofollow">notacją dużego O</a>.<br>Algorytmu wyszukiwania<br>
<br><a data-href="Wyszukiwanie binarne" href="algorithms\na-listach-posortowanych\wyszukiwanie-binarne.html" class="internal-link" target="_self" rel="noopener nofollow">Wyszukiwanie binarne</a>
]]></description><link>algorithms\algorytmy.html</link><guid isPermaLink="false">Algorithms/Algorytmy.md</guid><pubDate>Wed, 25 Dec 2024 19:34:34 GMT</pubDate></item><item><title><![CDATA[Notacja dużego O]]></title><description><![CDATA[ 
 <br><br>Notacja dużego O to sposób określania wydajności algorytmu w czasie. Notacja dużego O określa w przybliżeniu liczbę operacji, jakie wykonuje algorytm. Notacja ta wygląda w następujący sposób:<br><br>Gdzie  jest funkcją zależną od wielkości wejścia . <br>Przykłady:<br>
<br>: stała złożoność, np. dostęp do elementu w tablicy.
<br>: logarytmiczna złożoność, np. wyszukiwanie binarne. 
<br>: liniowa złożoność, np. jednorazowe przejście przez liste.
<br>Warto zaznaczyć również że notacja dużego O przedstawia górne ograniczenie złożoności w algorytmie, czyli jego zachowanie w najgorszym możliwym przypadku. Algorytm o złożoności  może w różnych przypadkach zachowywać się jak algorytm o złożoności .]]></description><link>matematyka\notacja-dużego-o.html</link><guid isPermaLink="false">Matematyka/Notacja dużego O.md</guid><pubDate>Tue, 24 Dec 2024 21:15:37 GMT</pubDate></item><item><title><![CDATA[Komunikacja międzyprocesowa]]></title><description><![CDATA[ 
 ]]></description><link>os\concepts\procesy\komunikacja-międzyprocesowa.html</link><guid isPermaLink="false">OS/Concepts/Procesy/Komunikacja międzyprocesowa.md</guid><pubDate>Wed, 25 Dec 2024 21:50:07 GMT</pubDate></item><item><title><![CDATA[Procesy]]></title><description><![CDATA[ 
 <br><br>Proces to w ogólnym pojęciu wykonujący się program. Z każdym procesem jest związana jego <a data-tooltip-position="top" aria-label="Przestrzeń adresowa" data-href="Przestrzeń adresowa" href="os\concepts\procesy\przestrzeń-adresowa.html" class="internal-link" target="_self" rel="noopener nofollow">przestrzeń adresowa</a>. Proces może być kojarzony jako kontener zawierający wszystkie informacje niezbędne do uruchomienia programu. <br><br><a data-href="Procesor CPU" href="os\hardware\procesor-cpu.html" class="internal-link" target="_self" rel="noopener nofollow">Procesor CPU</a> może stwierdzić że proces w ciągu ostatnich kilku sekund zużył znacznie więcej, niż wynosi jego kwant czasu procesora, więc go zatrzyma i rozpocznie działanie innego. Kiedy proces zostanie wstrzymany, wszystkie jego informacje oraz <a data-tooltip-position="top" aria-label="Wskaźnik" data-href="Wskaźnik" href="programming\ogólne-koncepty\wskaźnik.html" class="internal-link" target="_self" rel="noopener nofollow">wskaźniki</a> mówiące z jakich danych/plików korzysta dany proces są zapisywane w tabeli systemu operacyjnego nazywanej <a data-tooltip-position="top" aria-label="Tabela procesów" data-href="Tabela procesów" href="os\concepts\procesy\tabela-procesów.html" class="internal-link" target="_self" rel="noopener nofollow">tabelą procesów</a>.<br>Proces może utworzyć jeden lub kilka innych procesów (procesy potomne), zaś te procesy mogą tworzyć dalej swoje podprocesy, tworząc drzewo procesów. Powiązane procesy mogą wymieniać się działaniem i informacjami między sobą, co nazywane jest <a data-tooltip-position="top" aria-label="Komunikacja międzyprocesowa" data-href="Komunikacja międzyprocesowa" href="os\concepts\procesy\komunikacja-międzyprocesowa.html" class="internal-link" target="_self" rel="noopener nofollow">komunikacją międzyprocesową</a>.<br>Każdy uruchomiony proces posiada identyfikator <a data-href="UID" href="os\concepts\uid.html" class="internal-link" target="_self" rel="noopener nofollow">UID</a> użytkownika który zlecił utworzenie danego procesu. W systemach <a data-href="UNIX" href="os\systemy\unix.html" class="internal-link" target="_self" rel="noopener nofollow">UNIX</a> każdy podproces w drzewie procesów ma ten sam UID. Identyfikator administratora systemu posiada specjalne prawa i może naruszać wiele reguł zabezpieczeń.]]></description><link>os\concepts\procesy\procesy.html</link><guid isPermaLink="false">OS/Concepts/Procesy/Procesy.md</guid><pubDate>Wed, 25 Dec 2024 21:53:38 GMT</pubDate></item><item><title><![CDATA[Przestrzeń adresowa]]></title><description><![CDATA[ 
 <br><br>Przestrzeń adresowa to zakres adresów, jakie mogą być wykorzystane do identyfikacji lokalizacji w pamięci komputerowej lub innych zasobach. Przechowuje zazwyczaj informacje oraz dane <a data-tooltip-position="top" aria-label="Procesy" data-href="Procesy" href="os\concepts\procesy\procesy.html" class="internal-link" target="_self" rel="noopener nofollow">procesu</a> w <a data-tooltip-position="top" aria-label="Pamięć RAM" data-href="Pamięć RAM" href="os\hardware\pamięć-ram.html" class="internal-link" target="_self" rel="noopener nofollow">pamięci RAM</a>. Pamięć adresowa jednak nie jest równoznaczna z pamięcią fizyczną. Dzięki pamięci wirtualnej, jeżeli proces zarząda więcej pamięci niż jest wystarczająco w pamięci głównej, system operacyjny przekaże część danych do zapisania na <a data-tooltip-position="top" aria-label="Dyski" data-href="Dyski" href="os\hardware\dyski.html" class="internal-link" target="_self" rel="noopener nofollow">dysku</a>. ]]></description><link>os\concepts\procesy\przestrzeń-adresowa.html</link><guid isPermaLink="false">OS/Concepts/Procesy/Przestrzeń adresowa.md</guid><pubDate>Wed, 25 Dec 2024 21:59:55 GMT</pubDate></item><item><title><![CDATA[Tabela procesów]]></title><description><![CDATA[ 
 <br><br>Procesor wykorzystuje tabelę procesów aby przetrzymywać wszystkie wskaźniki i informacje procesu potrzebne do wznowienia przerwanego procesu. ]]></description><link>os\concepts\procesy\tabela-procesów.html</link><guid isPermaLink="false">OS/Concepts/Procesy/Tabela procesów.md</guid><pubDate>Wed, 25 Dec 2024 22:08:27 GMT</pubDate></item><item><title><![CDATA[Przerwania]]></title><description><![CDATA[ 
 <br>]]></description><link>os\concepts\przerwania.html</link><guid isPermaLink="false">OS/Concepts/Przerwania.md</guid><pubDate>Wed, 25 Dec 2024 00:16:18 GMT</pubDate></item><item><title><![CDATA[Tryby wykonywania]]></title><description><![CDATA[ 
 <br>]]></description><link>os\concepts\tryby-wykonywania.html</link><guid isPermaLink="false">OS/Concepts/Tryby wykonywania.md</guid><pubDate>Wed, 25 Dec 2024 00:34:49 GMT</pubDate></item><item><title><![CDATA[Dyski]]></title><description><![CDATA[ 
 ]]></description><link>os\hardware\dyski.html</link><guid isPermaLink="false">OS/Hardware/Dyski.md</guid><pubDate>Wed, 25 Dec 2024 21:59:56 GMT</pubDate></item><item><title><![CDATA[Magistrala]]></title><description><![CDATA[ 
 <br><br>Magistrala to element systemu komputerowego który służy do przesyłania danych pomiędzy różnymi komponentami urządzenia. Istnieje wiele rodzajów magistral o różnych prędkościach w zależności od zastosowania, a samo sformułowanie magistrala jest dosyć ogólne. Komputer musi mieć świadomość wszystkich magistral aby móc je kontrolować i sterować przepływem danych.<br>Przykłady magistral to:<br>
<br>Magistrale łączące rdzenie i pamięć podręczną
<br>PCI
<br>PCIe
<br>SATA
<br>USB
<br>Ethernet
<br>Magistrale różnią się również ilością pasm jakie posiadają, wpływa to na liczbę przesyłanych jednocześnie bitów. Ważną różnicą jest również sposób komunikacji:<br>
<br>Architektura współdzielonej magistrali (SBA - shared bus architecture) oznacza, że wiele urządzeń korzysta z tych samych kabli do przesyłania danych.
<br>Architektura równoległej magistrali (PBA - parallel bus architecture) oznacze, że każde słowo danych jest wysyłane za pośrednictwem wielu przewodów.
]]></description><link>os\hardware\magistrala.html</link><guid isPermaLink="false">OS/Hardware/Magistrala.md</guid><pubDate>Wed, 25 Dec 2024 00:32:52 GMT</pubDate></item><item><title><![CDATA[Pamięć CMOS]]></title><description><![CDATA[ 
 <br><br>Pamięć CMOS to pamięć ulotna wykorzystywana w komputerach do przechowywania daty i godziny jak i również często ustawień <a data-tooltip-position="top" aria-label="BIOS" data-href="BIOS" href="os\software\bios.html" class="internal-link" target="_self" rel="noopener nofollow">BIOSu</a>. Pamięć ta jest utrzymywana przy życiu przez baterię, dzięki czemu data i godzina aktualizowane są nawet przy wyłączonym komputerze, a ustawienia nie resetują się przy każdym reboocie.]]></description><link>os\hardware\pamięć-cmos.html</link><guid isPermaLink="false">OS/Hardware/Pamięć CMOS.md</guid><pubDate>Wed, 25 Dec 2024 12:47:23 GMT</pubDate></item><item><title><![CDATA[Pamięć EEPROM]]></title><description><![CDATA[ 
 <br><br>Pamięć EEPROM (electrically erasable PROM) to nieulotny rodzaj pamięci, jednak w odróżnieniu od pamięci <a data-tooltip-position="top" aria-label="Pamięć ROM" data-href="Pamięć ROM" href="os\hardware\pamięć-rom.html" class="internal-link" target="_self" rel="noopener nofollow">ROM</a> można ją kasować i ponownie zapisywać. Używa się jej w przypadkach gdzie może być potrzebne aktualizowanie bądź korygowanie błędółw w kodzie na niej zawartej. Najczęstrzym przypadkiem użytku pamięci EEPROM w nowoczesnych komputerach jesy zapisywanie na nich <a data-tooltip-position="top" aria-label="BIOS" data-href="BIOS" href="os\software\bios.html" class="internal-link" target="_self" rel="noopener nofollow">BIOSu</a> aby móc go w przyszłości aktualizować.]]></description><link>os\hardware\pamięć-eeprom.html</link><guid isPermaLink="false">OS/Hardware/Pamięć EEPROM.md</guid><pubDate>Tue, 24 Dec 2024 23:53:16 GMT</pubDate></item><item><title><![CDATA[Pamięć RAM]]></title><description><![CDATA[ 
 <br><br>Pamięc główna RAM (random-access memory) służy do obsługi wszystkich żądań procesora które nie mogły zostać obsłużone poprzez <a data-tooltip-position="top" aria-label="Procesor CPU > ^PamiecPodreczna" data-href="Procesor CPU#^PamiecPodreczna" href="os\hardware\procesor-cpu.html#^PamiecPodreczna" class="internal-link" target="_self" rel="noopener nofollow">pamięć podręczną</a>. Składa się zazwyczaj z kilku gigabajtów pamięci o wysokiej wydajności odczytu oraz zapisu. ]]></description><link>os\hardware\pamięć-ram.html</link><guid isPermaLink="false">OS/Hardware/Pamięć RAM.md</guid><pubDate>Tue, 24 Dec 2024 23:46:22 GMT</pubDate></item><item><title><![CDATA[Pamięć ROM]]></title><description><![CDATA[ 
 <br><br>Pamięć ROM (read only memory) to nieulotny rodzaj pamięci służący tylko do odczytu. Jest ona programowana przez producenta i nie może być później modyfikowana. Stosowana jest ona zazwyczaj do zamieszczania na komputerach programu ładującego wykorzystywanego do rozruchu, aby użytkownik nie mógł zepsuć podstawowego działania komputera.]]></description><link>os\hardware\pamięć-rom.html</link><guid isPermaLink="false">OS/Hardware/Pamięć ROM.md</guid><pubDate>Tue, 24 Dec 2024 23:50:18 GMT</pubDate></item><item><title><![CDATA[Podstawowy opis działania]]></title><description><![CDATA[ 
 <br><br>Procesor (ang. central processing unit, CPU) – podstawowy element jednostki centralnej komputera odpowiedzialny za wykonywanie <a data-tooltip-position="top" aria-label="Instrukcje programowe" data-href="Instrukcje programowe" href="programming\assembly\instrukcje-programowe.html" class="internal-link" target="_self" rel="noopener nofollow">instrukcji programów</a>. Procesor wykonuje obliczenia, zarządza danymi oraz steruje działaniem innych komponentów systemu używając połączenia z <a data-tooltip-position="top" aria-label="Magistrala" data-href="Magistrala" href="os\hardware\magistrala.html" class="internal-link" target="_self" rel="noopener nofollow">magistralą</a>.<br><br>Cykl każdego procesora polega na:<br>
<br>Pobraniu instrukcji z pamięci
<br>Zdekodowaniu jej
<br>Określeniu jej typu i operandów
<br>Uruchomieniu danej instrukcji
<br>Zapisaniu wyników w rejestrach lub pamięci
<br>Po czym cykl się powtarza dla każdej następnej instrukcji w pamięci aż do zakończenia działania programu. W celu optymalizacji standardowy model jednowątkowego pobierania instrukcji został zastąpiony tak zwanym potokiem bądź procesorem superskalarnym, w których jest pobieranych i wykonywanych wiele instrukcji w tym samym czasie.<br><br><br><br>Rejestry służa do szybkiego i wydajnego przechowywania wartości najważnieszych zmiennych i tymczasowych wyników. Procesor może w nich szybko zapisywać oraz odczytywać dane za pomocą instrukcji aby później móc je wykorzystać bądź zapisać permamentnie w pamięci. Wyróżnia się kilka wyjątkowych rejestrów:<br><br>Zawiera adres pamieci następnej instrukcji do pobrania.<br><br>Wskazuje wierzchołek bieżącego <a data-tooltip-position="top" aria-label="Stos" data-href="Stos" href="programming\ogólne-koncepty\stos.html" class="internal-link" target="_self" rel="noopener nofollow">stosu w pamięci</a>. Stos zawiera po jednej ramce dla każdej procedury, której wykonywanie się rozpoczęło, ale jeszcze nie zakończyło.<br><br>Ten rejestr zawiera bity kodu warunku ustawiane przez funkcje porównań, priorytet procesora, <a data-tooltip-position="top" aria-label="Tryby wykonywania" data-href="Tryby wykonywania" href="os\concepts\tryby-wykonywania.html" class="internal-link" target="_self" rel="noopener nofollow">tryb użytkownika lub jądra</a> oraz różne inne bity kontrolne. Programy użytkownika mogą standardowo czytać cały rejestr PSW.<br><br>Pamięć podręczna służy do szybkiego przetwarzania i zapisywania tymczasowych <a data-tooltip-position="top" aria-label="Jednostki pamięci > ^cab4e0" data-href="Jednostki pamięci#^cab4e0" href="programming\ogólne-koncepty\jednostki-pamięci.html#^cab4e0" class="internal-link" target="_self" rel="noopener nofollow">danych/słów</a>danych/słów bez zapisywania danych do <a data-tooltip-position="top" aria-label="Pamięć RAM" data-href="Pamięć RAM" href="os\hardware\pamięć-ram.html" class="internal-link" target="_self" rel="noopener nofollow">pamięci RAM</a> lub trwałej (co wykorzystuje drastycznie więcej cyklów procesora). <br>Wyróżnia się kilka rodzajów pamięci podecznej:<br>
L1 - Pamięć znajdująca się w samym procesorze<br>
Zawiera kilka do kilkudziesiędziu kilobajtów<br>
Nie wymaga żadnych cyklów procesora aby jej użyć<br>L2 - Pamięć znajdująca się dalej od procesora<br>
Zawiera nawet do kilku megabajtów<br>
Wymaga od jednego do dwóch cyklów procesora do użycia<br>
Może być to pamięć dedykowana dla każdego rdzenia, lub współdzielona dla kilku rdzeni.<br>Pamięc podręczna jest podzielona na linie pamięci podręcznej (cache lines), zazwyczaj o pojemności 64 bajtów. Użycie pamięci podręcznej polega na sprawdzeniu poprzez procesor pamięci podręcznej czy potrzebne dane bądź miejsce są dostępne w najbliższej linii pamięci (hit). Jeśli tak się nie dzieje (miss) procesor szuka w wyższch poziomach pamięci. W przyapdku braku danych/pamięci w każdej pamięci cache, procesor odwołuje się do pamięci RAM. Pamięć L2 może również służyć do buforowania danych do wysłania do pamięci RAM oszczędzając cykle procesora w porównaniu do wysyłania danych prosto do pamięci RAM.<br><br>Część procesora odpowiedzialna za zarządzanie pamięcią fizyczną oraz wirtualną, mapowanim adresów pamięci w locie oraz zarządzaniem <a data-tooltip-position="top" aria-label="Przestrzeń adresowa" data-href="Przestrzeń adresowa" href="os\concepts\procesy\przestrzeń-adresowa.html" class="internal-link" target="_self" rel="noopener nofollow">przestrzenią adresową</a> procesów.<br>]]></description><link>os\hardware\procesor-cpu.html</link><guid isPermaLink="false">OS/Hardware/Procesor CPU.md</guid><pubDate>Thu, 26 Dec 2024 00:18:33 GMT</pubDate></item><item><title><![CDATA[Procesor GPU]]></title><description><![CDATA[ 
 <br>]]></description><link>os\hardware\procesor-gpu.html</link><guid isPermaLink="false">OS/Hardware/Procesor GPU.md</guid><pubDate>Wed, 25 Dec 2024 21:35:30 GMT</pubDate></item><item><title><![CDATA[BIOS]]></title><description><![CDATA[ 
 <br><br>BIOS (Basic Input/Output System) to powszechna nazwa kodu startowego w komputerze. W nowoczesnych komputerach system BIOS został zamieniony systemem <a data-href="UEFI" href="os\software\uefi.html" class="internal-link" target="_self" rel="noopener nofollow">UEFI</a>.]]></description><link>os\software\bios.html</link><guid isPermaLink="false">OS/Software/BIOS.md</guid><pubDate>Wed, 25 Dec 2024 21:06:29 GMT</pubDate></item><item><title><![CDATA[UEFI]]></title><description><![CDATA[ 
 <br><br>UEFI (Unified Extensible Firmware Interface) to kod startowy komputera który jest nowoczesnym zamiennikiem <a data-tooltip-position="top" aria-label="BIOS" data-href="BIOS" href="os\software\bios.html" class="internal-link" target="_self" rel="noopener nofollow">BIOSu</a>. W przeciwieństwie do trybu legacy BIOS kod startowy UEFI jest szybki i wydajny, obsługuje różne architektury i większe rozmiary pamięci masowej (nawet do 8 ZiB).]]></description><link>os\software\uefi.html</link><guid isPermaLink="false">OS/Software/UEFI.md</guid><pubDate>Wed, 25 Dec 2024 21:05:56 GMT</pubDate></item><item><title><![CDATA[System Operacyjny]]></title><description><![CDATA[ 
 <br><br>System operacyjny (OS - Operating System) to oprogramowanie systemowe działające w <a data-tooltip-position="top" aria-label="Tryby wykonywania" data-href="Tryby wykonywania" href="os\concepts\tryby-wykonywania.html" class="internal-link" target="_self" rel="noopener nofollow">trybie jądra</a> (chociaż może mieć części działające w trybie użytkownika), które zarządza sprzętem komputerowym oraz podstawowymi funkcjami programowymi.  Dostarczają programistom apliklacji czytelnego, abstrakcyjnego zbioru zasobów będacych odpowiednikami sprzętu oraz zarządzają tymi zasobami.<br>Wyróżnia się kilka rodzajów systemów operacyjnych:<br>
<br>Systemy komputerów mainframe
<br>Systemy serwerów
<br>Systemy komputerów osobistych
<br>Systemy smartfonów i komputerów podręcznych
<br>Wbudowane systemy operacyjne i IoT (Internet of Things)
<br>Systemy czasu rzeczywistego
<br>Systemy kart elektronicznych
]]></description><link>os\systemy\system-operacyjny.html</link><guid isPermaLink="false">OS/Systemy/System Operacyjny.md</guid><pubDate>Wed, 25 Dec 2024 21:26:39 GMT</pubDate></item><item><title><![CDATA[Project OS]]></title><description><![CDATA[ 
 <br>Do wykonania systemu operacyjnego naucz się najpierw:<br>
<br>Programowania w C
<br>Programowania w assembler
<br>Teoria systemów operacyjnych (książka)
<br>Podstawy działania kompilatorów (assembler, linker, make utility)
<br>Użytkowanie systeów UNIX
<br>Emulatory i wirtualizacja
<br>Działanie procesorów na które programujesz
<br>Zarządzanie pamięcią
<br>Generowanie plików wykonywalnych dla kernela
]]></description><link>os\project-os.html</link><guid isPermaLink="false">OS/Project OS.md</guid><pubDate>Tue, 24 Dec 2024 12:17:55 GMT</pubDate></item><item><title><![CDATA[Instrukcje programowe]]></title><description><![CDATA[ 
 <br><br>Instrukcje programowe to podstawowe polecenia wykonywane przez procesor komputera w celu realizacji określonego zadania. Instrukcje te są częścią zestawu instrukcji procesora i różnią się w zależności od jego architektury (np. x86, ARM, PowerPC).  Wszystkie instrukcje programowe są napisane w tzw. <a data-tooltip-position="top" aria-label="Asembler" data-href="Asembler" href="programming\ogólne-koncepty\asembler.html" class="internal-link" target="_self" rel="noopener nofollow">asemblerze</a>, czyli najbardzej wysokopoziomowym języku programowania odczytywalnym dla ludzi. Każdy język jest przekształcany w trakcie kompilacji w instrukcje asemblera.<br><br><br>Instrukcja powinna się składać z kilku elementów:<br>
<br>Kod operacji (opcode) - definicja rodzaju operacji do wykonania przez procesor.
<br>Operandy - argumenty danej operacji.
<br>Długośc instrukcji - różni się w zależności od architektury procesora.
<br>Przykładowa instrukcja może wyglądać tak:<br>ADD ECX, 10
<br>Kod ten dodaje natychmiastową wartość 10 do rejestru ECX, gdzie:<br>
<br>ADD - Kod operacji dodania 
<br>ECX, 10 - Operandy (ECX - rejestr docelowy, 10 - wartość dodania)
]]></description><link>programming\assembly\instrukcje-programowe.html</link><guid isPermaLink="false">Programming/Assembly/Instrukcje programowe.md</guid><pubDate>Tue, 24 Dec 2024 21:50:12 GMT</pubDate></item><item><title><![CDATA[Obsługa SQL]]></title><description><![CDATA[ 
 <br>]]></description><link>programming\c#\obsługa-sql.html</link><guid isPermaLink="false">Programming/C#/Obsługa SQL.md</guid><pubDate>Wed, 25 Dec 2024 00:59:00 GMT</pubDate></item><item><title><![CDATA[Asembler]]></title><description><![CDATA[ 
 <br><br>Program tworzący kod maszynowy na podstawie kodu źródłowego.]]></description><link>programming\ogólne-koncepty\asembler.html</link><guid isPermaLink="false">Programming/Ogólne koncepty/Asembler.md</guid><pubDate>Wed, 25 Dec 2024 21:01:44 GMT</pubDate></item><item><title><![CDATA[WORDs]]></title><description><![CDATA[ 
 <br><br>]]></description><link>programming\ogólne-koncepty\jednostki-pamięci.html</link><guid isPermaLink="false">Programming/Ogólne koncepty/Jednostki pamięci.md</guid><pubDate>Thu, 26 Dec 2024 00:17:24 GMT</pubDate></item><item><title><![CDATA[Wskaźnik]]></title><description><![CDATA[ 
 <br>]]></description><link>programming\ogólne-koncepty\wskaźnik.html</link><guid isPermaLink="false">Programming/Ogólne koncepty/Wskaźnik.md</guid><pubDate>Wed, 25 Dec 2024 21:44:28 GMT</pubDate></item></channel></rss>